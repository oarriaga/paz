import os
import pytest
import numpy as np
from paz.backend.camera import Camera
from paz.backend.image import load_image
from scipy.optimize import least_squares
from tensorflow.keras.utils import get_file
from paz.applications import EstimateHumanPose


def get_camera_intrinsics(image_height, image_width):
    camera = Camera()
    camera.intrinsics_from_HFOV(HFOV=70,
                                image_shape=[image_height, image_width])
    return camera.intrinsics


@pytest.fixture
def image_with_multiple_persons():
    URL = ('https://github.com/oarriaga/altamira-data/releases/download'
           '/v0.17/multiple_persons_posing.png')
    filename = os.path.basename(URL)
    fullpath = get_file(filename, URL, cache_subdir='paz/tests')
    image = load_image(fullpath)
    return image


@pytest.fixture
def image_with_single_person():
    URL = ('https://github.com/oarriaga/altamira-data/releases/download/'
           'v0.17/one_person_posing.png')
    filename = os.path.basename(URL)
    fullpath = get_file(filename, URL, cache_subdir='paz/tests')
    image = load_image(fullpath)
    return image


@pytest.fixture
def keypoints3D_multiple_persons():
    keypoints = np.array(
        [[[-3.65546735e+01, 3.90211513e+01, 1.64825580e+03],
          [-1.51281494e+02, 5.11555416e+01, 1.58027460e+03],
          [-1.72418479e+02, 4.58488712e+02, 1.74202366e+03],
          [-2.50931834e+02, 8.45724719e+02, 1.93739909e+03],
          [-4.81107368e+01, 7.81170876e+02, 1.81473309e+03],
          [-4.83993837e+01, 7.75784215e+02, 1.81343824e+03],
          [7.81714785e+01, 2.68868102e+01, 1.71623665e+03],
          [9.13833175e+01, 4.52505638e+02, 1.83958171e+03],
          [5.90349677e+01, 8.40203071e+02, 2.03781381e+03],
          [-4.78189135e+01, 7.87658015e+02, 1.81492178e+03],
          [-4.79637575e+01, 7.75456215e+02, 1.81196961e+03],
          [-3.65534569e+01, 3.89351403e+01, 1.64823650e+03],
          [-3.20313392e+01, -2.10448766e+02, 1.58672137e+03],
          [-1.37727957e+01, -4.45424690e+02, 1.47609839e+03],
          [1.89890906e+01, -5.25470641e+02, 1.35808846e+03],
          [-1.52557996e+01, -6.38361256e+02, 1.35083580e+03],
          [-3.08792954e+01, -3.96067755e+02, 1.55055840e+03],
          [1.45186829e+02, -4.56835784e+02, 1.52400287e+03],
          [1.82285548e+02, -2.38152219e+02, 1.46480643e+03],
          [-7.34205404e+01, -2.28181869e+02, 1.35737565e+03],
          [-3.52888153e+01, -8.11494277e+01, 1.62000320e+03],
          [-3.49756665e+01, -1.12759098e+02, 1.61304775e+03],
          [-3.56701295e+01, -6.87742047e+01, 1.62262509e+03],
          [-3.56701295e+01, -6.87742047e+01, 1.62262509e+03],
          [-3.08792954e+01, -3.96067755e+02, 1.55055840e+03],
          [-1.72070412e+02, -4.11757779e+02, 1.44070529e+03],
          [-1.90861276e+02, -1.58560047e+02, 1.39177813e+03],
          [3.08682649e+01, -1.69791134e+02, 1.32997947e+03],
          [-3.56841045e+01, -1.29643418e+02, 1.61086555e+03],
          [-3.51548484e+01, -1.61863101e+02, 1.60353502e+03],
          [-3.60300824e+01, -1.26846623e+02, 1.61142152e+03],
          [-3.60300824e+01, -1.26846623e+02, 1.61142152e+03]],

         [[-4.62335250e+02, 2.29162378e+01, 1.64454653e+03],
          [-5.59097205e+02, 3.24339314e+01, 1.57435819e+03],
          [-6.29914936e+02, 4.18506554e+02, 1.68787987e+03],
          [-7.54074770e+02, 8.05456388e+02, 1.84653963e+03],
          [-4.73891313e+02, 7.65065963e+02, 1.81102382e+03],
          [-4.74179960e+02, 7.59679302e+02, 1.80972897e+03],
          [-3.65573821e+02, 1.33986271e+01, 1.71473426e+03],
          [-4.26545103e+02, 4.23828285e+02, 1.86771226e+03],
          [-4.97528524e+02, 7.78339426e+02, 2.06435245e+03],
          [-4.73599490e+02, 7.71553102e+02, 1.81121251e+03],
          [-4.73744334e+02, 7.59351302e+02, 1.80826034e+03],
          [-4.62334033e+02, 2.28302267e+01, 1.64452723e+03],
          [-4.76651799e+02, -2.23724985e+02, 1.58205913e+03],
          [-4.65746112e+02, -4.62049382e+02, 1.48270446e+03],
          [-3.88406934e+02, -5.40785889e+02, 1.38031714e+03],
          [-3.96066764e+02, -6.57235538e+02, 1.36076147e+03],
          [-4.56659872e+02, -4.12172668e+02, 1.54684913e+03],
          [-3.46244875e+02, -4.68653351e+02, 1.57007088e+03],
          [-3.38194250e+02, -2.46824816e+02, 1.76024586e+03],
          [-2.98512000e+02, -4.55869888e+01, 1.75985328e+03],
          [-4.61069392e+02, -9.72543412e+01, 1.61629392e+03],
          [-4.60756243e+02, -1.28864011e+02, 1.60933847e+03],
          [-4.61450706e+02, -8.48791182e+01, 1.61891581e+03],
          [-4.61450706e+02, -8.48791182e+01, 1.61891581e+03],
          [-4.56659872e+02, -4.12172668e+02, 1.54684913e+03],
          [-6.06122855e+02, -4.44462002e+02, 1.44025670e+03],
          [-6.98254794e+02, -1.90110251e+02, 1.52270422e+03],
          [-6.17581479e+02, 2.75257146e+01, 1.56420152e+03],
          [-4.61464681e+02, -1.45748331e+02, 1.60715628e+03],
          [-4.60935425e+02, -1.77968014e+02, 1.59982574e+03],
          [-4.61810659e+02, -1.42951536e+02, 1.60771224e+03],
          [-4.61810659e+02, -1.42951536e+02, 1.60771224e+03]],

         [[4.20225339e+02, 6.38035278e-01, 1.59376799e+03],
          [3.19415280e+02, 2.33724466e+01, 1.52597529e+03],
          [3.96131971e+02, 4.24238179e+02, 1.72193094e+03],
          [4.00839168e+02, 8.20635005e+02, 1.89264196e+03],
          [4.08669276e+02, 7.42787760e+02, 1.76024528e+03],
          [4.08380629e+02, 7.37401099e+02, 1.75895043e+03],
          [5.21035028e+02, -2.20962946e+01, 1.66156057e+03],
          [5.65266578e+02, 4.09605410e+02, 1.75897500e+03],
          [5.84245512e+02, 8.16456691e+02, 1.90858797e+03],
          [4.08961099e+02, 7.49274899e+02, 1.76043397e+03],
          [4.08816255e+02, 7.37073099e+02, 1.75748180e+03],
          [4.20226556e+02, 5.52024230e-01, 1.59374869e+03],
          [4.06664873e+02, -2.48288495e+02, 1.51053050e+03],
          [4.11202650e+02, -4.75034563e+02, 1.37856706e+03],
          [4.02096214e+02, -5.26071008e+02, 1.26462110e+03],
          [3.47701847e+02, -6.28176620e+02, 1.24613732e+03],
          [4.25900717e+02, -4.34450871e+02, 1.49607059e+03],
          [5.67150275e+02, -5.08481358e+02, 1.44148861e+03],
          [6.17324266e+02, -2.82327780e+02, 1.58184158e+03],
          [5.53447124e+02, -2.63041904e+01, 1.58283661e+03],
          [4.21491198e+02, -1.19532544e+02, 1.56551539e+03],
          [4.21804346e+02, -1.51142214e+02, 1.55855994e+03],
          [4.21109883e+02, -1.07157321e+02, 1.56813727e+03],
          [4.21109883e+02, -1.07157321e+02, 1.56813727e+03],
          [4.25900717e+02, -4.34450871e+02, 1.49607059e+03],
          [2.67180669e+02, -4.48380664e+02, 1.36857386e+03],
          [2.44415631e+02, -2.17677476e+02, 1.52741581e+03],
          [2.36460058e+02, 9.92767467e-01, 1.59298173e+03],
          [4.21095908e+02, -1.68026534e+02, 1.55637774e+03],
          [4.21625165e+02, -2.00246217e+02, 1.54904721e+03],
          [4.20749931e+02, -1.65229739e+02, 1.55693371e+03],
          [4.20749931e+02, -1.65229739e+02, 1.55693371e+03]]])
    return keypoints


@pytest.fixture
def pose6D_multiple_persons():
    rotation = np.array([[-0.85676852, 0.50876681, 0.0842854],
                         [0.0906185, 0.30942157, -0.94659737],
                         [-0.50767705, -0.80337701, -0.31120635]])
    translation = [-0.036554673482050534,
                   0.03902115132256925,
                   1.6482558044796256]
    return rotation, translation


@pytest.fixture
def keypoints3D_single_person():
    keypoints = np.array(
        [[[9.67111798, 287.17890101, 1249.49629422],
          [-91.94271692, 285.60844596, 1171.13835596],
          [-119.09987444, 590.67124119, 1118.85284862],
          [-191.49533347, 962.8524053, 1143.83789978],
          [-1.88494532, 1029.32862601, 1415.97358122],
          [-2.17359222, 1023.94196501, 1414.67873122],
          [111.28519049, 288.74942165, 1327.85383688],
          [88.98944867, 626.22067208, 1268.757121],
          [31.22169975, 965.62760168, 1298.74434885],
          [-1.59312202, 1035.81576501, 1416.16227122],
          [-1.73796602, 1023.61396501, 1413.21010422],
          [9.67233459, 287.09288996, 1249.47699417],
          [2.87552954, 32.46237421, 1195.80155062],
          [17.49262023, -199.44005728, 1092.95168879],
          [39.4981144, -338.61240911, 998.09053878],
          [32.25326783, -466.18521415, 989.94945354],
          [15.34649602, -147.91000499, 1151.79889262],
          [212.09451743, -231.65148267, 1166.25017354],
          [272.05192152, 27.66431829, 1279.33501162],
          [207.34385103, 240.36124655, 1217.31866777],
          [10.93697619, 167.00832201, 1221.24368932],
          [11.25012496, 135.39865201, 1214.28823942],
          [10.55566197, 179.38354501, 1223.86557532],
          [10.55566197, 179.38354501, 1223.86557532],
          [15.34649602, -147.91000499, 1151.79889262],
          [-183.80475126, -213.00232015, 1044.01245715],
          [-267.02275556, 47.68698734, 1148.37134125],
          [-195.8806183, 295.1013677, 1200.57185717],
          [10.541687, 118.51433201, 1212.10604442],
          [11.07094311, 86.29464901, 1204.77550672],
          [10.1957091, 121.31112701, 1212.66200782],
          [10.1957091, 121.31112701, 1212.66200782]]])
    return keypoints


@pytest.fixture
def pose6D_single_person():
    rotation = np.array([[-0.79183663, 0.58777063, 0.16589284],
                         [-0.01223818, 0.2563039, -0.96651877],
                         [-0.61061033, -0.7673552, -0.19575757]])
    translation = [0.009671117978780036,
                   0.28717890101249915,
                   1.2494962942197794]
    return rotation, translation


def test_simple_baselines_multiple_persons(image_with_multiple_persons,
                                           keypoints3D_multiple_persons,
                                           pose6D_multiple_persons):
    image_height, image_width = image_with_multiple_persons.shape[:2]
    camera_intrinsics = get_camera_intrinsics(image_height, image_width)
    pipeline = EstimateHumanPose(least_squares, camera_intrinsics)

    keypoints = pipeline(image_with_multiple_persons)
    assert np.allclose(keypoints['keypoints3D'],
                       keypoints3D_multiple_persons)
    predicted_rotation, predicted_translation = keypoints['pose6D']
    assert np.allclose(predicted_rotation, pose6D_multiple_persons[0])
    assert np.allclose(predicted_translation, pose6D_multiple_persons[1])


def test_simple_baselines_single_person(image_with_single_person,
                                        keypoints3D_single_person,
                                        pose6D_single_person):
    image_height, image_width = image_with_single_person.shape[:2]
    camera_intrinsics = get_camera_intrinsics(image_height, image_width)
    pipeline = EstimateHumanPose(least_squares, camera_intrinsics)

    keypoints = pipeline(image_with_single_person)
    assert np.allclose(keypoints['keypoints3D'],
                       keypoints3D_single_person)
    predicted_rotation, predicted_translation = keypoints['pose6D']
    assert np.allclose(predicted_rotation, pose6D_single_person[0])
    assert np.allclose(predicted_translation, pose6D_single_person[1])
